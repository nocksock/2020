#+TITLE: Advent of code 2020
#+PROPERTY: header-args :results output 

* My Goals for AOC

My primary goal is to learn emacs' org-mode literate programming features.
JavaScript is my primary programming language so I'm picking that. Also I'm
trying to write easy to understand code and might sacrifice elegance and
performance.

* DONE Day 1: Report Repar
** Part 1
After saving Christmas five years in a row, you've decided to take a vacation at
a nice resort on a tropical island. Surely, Christmas will go on without you.

The tropical island has its own currency and is entirely cash-only. The gold
coins used there have a little picture of a starfish; the locals just call them
stars. None of the currency exchanges seem to have heard of them, but somehow,
you'll need to find fifty of these coins by the time you arrive so you can pay
the deposit on your room.

To save your vacation, you need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day
in the Advent calendar; the second puzzle is unlocked when you complete the
first. Each puzzle grants one star. Good luck!

Before you leave, the Elves in accounting just need you to fix your expense
report (your puzzle input); apparently, something isn't quite adding up.

Specifically, they need you to find the two entries that sum to 2020 and then
multiply those two numbers together.

For example, suppose your expense report contained the following:

1721
979
366
299
675
1456

In this list, the two entries that sum to 2020 are 1721 and 299. Multiplying
them together produces 1721 * 299 = 514579, so the correct answer is 514579.

Of course, your expense report is much larger. Find the two entries that sum to
2020; what do you get if you multiply them together?

*** DONE Solution

#+BEGIN_SRC js
const fs = require('fs')
fs.readFile('day1-input.txt', 'utf-8', (err, data) => {
    console.log('result:', parseList(data))
})

function parseList(list) {
    const entries = list.split(/\r?\n/).map(entry => parseInt(entry, 10)
)
    // brute force
    // not even removing duplicate (299+675 vs 675+299)
    for (let a = entries.length-1; a >= 0; a--) {
        for (let b = entries.length-1; b >= 0; b--) {
            if (entries[a]+entries[b] === 2020) {
                return entries[a]*entries[b]
            }
        }
    }
}
#+END_SRC

#+RESULTS:
: result: 211899

** Part 2
The Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.

Using the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.

In your expense report, what is the product of the three entries that sum to 2020?

*** TODO Solution
#+BEGIN_SRC js
const fs = require('fs')
fs.readFile('day1-input.txt', 'utf-8', (err, data) => {
    console.log('result:', parseList(data))
})

function parseList(list) {
    const entries = list.split(/\r?\n/).map(entry => parseInt(entry, 10)
)
    // brute force
    // not even removing duplicate (299+675 vs 675+299)
    for (let a = entries.length-1; a >= 0; a--) {
        for (let b = entries.length-1; b >= 0; b--) {
            for (let c = entries.length-1; c >= 0; c--) {
                if (entries[a]+entries[b]+entries[c] === 2020) {
                    return entries[a]*entries[b]*entries[c]
                }
            }
        }
    }
}
#+END_SRC

#+RESULTS:
: result: 275765682


* TODO Day 2: Password Philosophy 

** Part 1:

Your flight departs in a few days from the coastal airport; the easiest way down
to the coast from here is via toboggan.

The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day.
"Something's wrong with our computers; we can't log in!" You ask if you can take
a look.

Their password database seems to be a little corrupted: some of the passwords
wouldn't have been allowed by the Official Toboggan Corporate Policy that was in
effect when they were chosen.

To try to debug the problem, they have created a list (your puzzle input) of
passwords (according to the corrupted database) and the corporate policy when
that password was set.

For example, suppose you have the following list:

1-3 a: abcde 1-3 b: cdefg 2-9 c: ccccccccc

Each line gives the password policy and then the password. The password policy
indicates the lowest and highest number of times a given letter must appear for
the password to be valid. For example, 1-3 a means that the password must
contain a at least 1 time and at most 3 times.

In the above example, 2 passwords are valid. The middle password, cdefg, is not;
it contains no instances of b, but needs at least 1. The first and third
passwords are valid: they contain one a or nine c, both within the limits of
their respective policies.

How many passwords are valid according to their policies?

*** Solution:

#+BEGIN_SRC js
const fs = require('fs')
fs.readFile('./day2-input.txt', 'utf-8', (err, data) => {
    const lines = data.split(/\r?\n/)
})
#+END_SRC

#+RESULTS:
